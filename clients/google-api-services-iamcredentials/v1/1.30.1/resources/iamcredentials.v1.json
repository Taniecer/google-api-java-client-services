{
  "canonicalName": "IAM Credentials",
  "mtlsRootUrl": "https://iamcredentials.mtls.googleapis.com/",
  "id": "iamcredentials:v1",
  "revision": "20200612",
  "resources": {
    "projects": {
      "resources": {
        "serviceAccounts": {
          "methods": {
            "signJwt": {
              "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signJwt",
              "path": "v1/{+name}:signJwt",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "SignJwtRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Signs a JWT using a service account's system-managed private key.",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/serviceAccounts/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "Required. The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "SignJwtResponse"
              },
              "httpMethod": "POST",
              "id": "iamcredentials.projects.serviceAccounts.signJwt"
            },
            "signBlob": {
              "path": "v1/{+name}:signBlob",
              "id": "iamcredentials.projects.serviceAccounts.signBlob",
              "description": "Signs a blob using a service account's system-managed private key.",
              "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signBlob",
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "SignBlobResponse"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Required. The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/serviceAccounts/[^/]+$",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "SignBlobRequest"
              }
            },
            "generateAccessToken": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GenerateAccessTokenResponse"
              },
              "request": {
                "$ref": "GenerateAccessTokenRequest"
              },
              "path": "v1/{+name}:generateAccessToken",
              "httpMethod": "POST",
              "description": "Generates an OAuth 2.0 access token for a service account.",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/serviceAccounts/[^/]+$",
                  "location": "path",
                  "description": "Required. The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:generateAccessToken",
              "id": "iamcredentials.projects.serviceAccounts.generateAccessToken"
            },
            "generateIdToken": {
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/serviceAccounts/[^/]+$",
                  "type": "string",
                  "description": "Required. The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+name}:generateIdToken",
              "parameterOrder": [
                "name"
              ],
              "id": "iamcredentials.projects.serviceAccounts.generateIdToken",
              "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:generateIdToken",
              "request": {
                "$ref": "GenerateIdTokenRequest"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "GenerateIdTokenResponse"
              },
              "description": "Generates an OpenID Connect ID token for a service account."
            }
          }
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "baseUrl": "https://iamcredentials.googleapis.com/",
  "basePath": "",
  "servicePath": "",
  "rootUrl": "https://iamcredentials.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "protocol": "rest",
  "documentationLink": "https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials",
  "schemas": {
    "GenerateAccessTokenRequest": {
      "type": "object",
      "id": "GenerateAccessTokenRequest",
      "properties": {
        "lifetime": {
          "description": "The desired lifetime duration of the access token in seconds.\nMust be set to a value less than or equal to 3600 (1 hour). If a value is\nnot specified, the token's lifetime will be set to a default value of one\nhour.",
          "format": "google-duration",
          "type": "string"
        },
        "scope": {
          "description": "Required. Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delegates": {
          "type": "array",
          "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SignJwtRequest": {
      "type": "object",
      "id": "SignJwtRequest",
      "properties": {
        "payload": {
          "type": "string",
          "description": "Required. The JWT payload to sign. Must be a serialized JSON object that contains a\nJWT Claims Set. For example: `{\"sub\": \"user@example.com\", \"iat\": 313435}`\n\nIf the JWT Claims Set contains an expiration time (`exp`) claim, it must be\nan integer timestamp that is not in the past and no more than 12 hours in\nthe future."
        },
        "delegates": {
          "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "SignBlobResponse": {
      "properties": {
        "keyId": {
          "description": "The ID of the key used to sign the blob. The key used for signing will\nremain valid for at least 12 hours after the blob is signed. To verify the\nsignature, you can retrieve the public key in several formats from the\nfollowing endpoints:\n\n- RSA public key wrapped in an X.509 v3 certificate:\n`https://www.googleapis.com/service_accounts/v1/metadata/x509/{ACCOUNT_EMAIL}`\n- Raw key in JSON format:\n`https://www.googleapis.com/service_accounts/v1/metadata/raw/{ACCOUNT_EMAIL}`\n- JSON Web Key (JWK):\n`https://www.googleapis.com/service_accounts/v1/metadata/jwk/{ACCOUNT_EMAIL}`",
          "type": "string"
        },
        "signedBlob": {
          "description": "The signature for the blob. Does not include the original blob.\n\nAfter the key pair referenced by the `key_id` response field expires,\nGoogle no longer exposes the public key that can be used to verify the\nblob. As a result, the receiver can no longer verify the signature.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SignBlobResponse"
    },
    "SignJwtResponse": {
      "id": "SignJwtResponse",
      "type": "object",
      "properties": {
        "signedJwt": {
          "description": "The signed JWT. Contains the automatically generated header; the\nclient-supplied payload; and the signature, which is generated using the\nkey referenced by the `kid` field in the header.\n\nAfter the key pair referenced by the `key_id` response field expires,\nGoogle no longer exposes the public key that can be used to verify the JWT.\nAs a result, the receiver can no longer verify the signature.",
          "type": "string"
        },
        "keyId": {
          "type": "string",
          "description": "The ID of the key used to sign the JWT. The key used for signing will\nremain valid for at least 12 hours after the JWT is signed. To verify the\nsignature, you can retrieve the public key in several formats from the\nfollowing endpoints:\n\n- RSA public key wrapped in an X.509 v3 certificate:\n`https://www.googleapis.com/service_accounts/v1/metadata/x509/{ACCOUNT_EMAIL}`\n- Raw key in JSON format:\n`https://www.googleapis.com/service_accounts/v1/metadata/raw/{ACCOUNT_EMAIL}`\n- JSON Web Key (JWK):\n`https://www.googleapis.com/service_accounts/v1/metadata/jwk/{ACCOUNT_EMAIL}`"
        }
      }
    },
    "GenerateIdTokenRequest": {
      "properties": {
        "includeEmail": {
          "description": "Include the service account email in the token. If set to `true`, the\ntoken will contain `email` and `email_verified` claims.",
          "type": "boolean"
        },
        "delegates": {
          "type": "array",
          "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
          "items": {
            "type": "string"
          }
        },
        "audience": {
          "description": "Required. The audience for the token, such as the API or account that this token\ngrants access to.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GenerateIdTokenRequest"
    },
    "GenerateIdTokenResponse": {
      "properties": {
        "token": {
          "description": "The OpenId Connect ID token.",
          "type": "string"
        }
      },
      "id": "GenerateIdTokenResponse",
      "type": "object"
    },
    "SignBlobRequest": {
      "type": "object",
      "id": "SignBlobRequest",
      "properties": {
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "Required. The bytes to sign."
        },
        "delegates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid."
        }
      }
    },
    "GenerateAccessTokenResponse": {
      "type": "object",
      "id": "GenerateAccessTokenResponse",
      "properties": {
        "accessToken": {
          "description": "The OAuth 2.0 access token.",
          "type": "string"
        },
        "expireTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Token expiration time.\nThe expiration time is always set."
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "description": "Creates short-lived credentials for impersonating IAM service accounts.",
  "discoveryVersion": "v1",
  "title": "IAM Service Account Credentials API",
  "version": "v1",
  "name": "iamcredentials",
  "ownerName": "Google",
  "ownerDomain": "google.com",
  "version_module": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "batchPath": "batch",
  "parameters": {
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "$.xgafv": {
      "type": "string",
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    }
  }
}
